---
interface Props {
  title: string;
  emoji: string;
}

const { title, emoji } = Astro.props;
---

<div class="root-accordion bg-black/[0.03] hover:bg-black/[0.06] dark:bg-white/[0.03] dark:hover:bg-white/[0.06] border border-black/[0.07] dark:border-white/[0.07] rounded-lg overflow-hidden mb-4">
  <div class="p-4 md:p-6">
    <div class="flex justify-between items-start gap-4">
      <div class="space-y-3 md:space-y-4 flex-grow">
        <div class="flex items-center justify-between">
          <h3 class="text-base md:text-2xl font-mono font-bold flex items-center gap-2 text-black/80 dark:text-white/80">
            <span role="img" aria-label="section">{emoji}</span> {title}
          </h3>
          <button class="accordion-toggle p-1 rounded-full hover:bg-black/10 dark:hover:bg-white/10 flex-shrink-0 transition-colors">
            <svg class="w-3 h-3 md:w-4 md:h-4 transition-transform duration-300 text-black/60 dark:text-white/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
      </div>
    </div>
    <div class="accordion-content hidden mt-6">
      <slot />
    </div>
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const accordions = document.querySelectorAll('.root-accordion');
    
    accordions.forEach(accordion => {
      const toggle = accordion.querySelector('.accordion-toggle');
      const content = accordion.querySelector('.accordion-content');
      const arrow = toggle?.querySelector('svg');
      
      toggle?.addEventListener('click', () => {
        content?.classList.toggle('hidden');
        arrow?.classList.toggle('rotate-180');
      });
    });
  });
</script>

<style>
  .root-accordion {
    transition: all 0.3s ease;
  }
  
  .accordion-toggle svg {
    transition: transform 0.3s ease;
  }
</style> 